definitions:
  models.ArmorResult:
    properties:
      armor:
        items:
          $ref: '#/definitions/models.StrippedItem'
        type: array
      set_name:
        type: string
      set_rarity:
        type: string
      stats:
        additionalProperties:
          format: float64
          type: number
        type: object
    type: object
  models.BestRunOutput:
    properties:
      damage_dealt:
        type: number
      damage_mitigated:
        type: number
      deaths:
        type: integer
      dungeon_class:
        type: string
      elapsed_time:
        type: integer
      grade:
        type: string
      mobs_killed:
        type: integer
      score_bonus:
        type: integer
      score_exploration:
        type: integer
      score_skill:
        type: integer
      score_speed:
        type: integer
      secrets_found:
        type: integer
      timestamp:
        type: integer
    type: object
  models.BestiaryCategoryOutput:
    properties:
      mobs:
        items:
          $ref: '#/definitions/models.BestiaryMobOutput'
        type: array
      mobsMaxed:
        type: integer
      mobsUnlocked:
        type: integer
      name:
        type: string
      texture:
        type: string
    type: object
  models.BestiaryMobOutput:
    properties:
      kills:
        type: integer
      maxKills:
        type: integer
      maxTier:
        type: integer
      name:
        type: string
      nextTierKills:
        type: integer
      texture:
        type: string
      tier:
        type: integer
    type: object
  models.BestiaryOutput:
    properties:
      categories:
        additionalProperties:
          $ref: '#/definitions/models.BestiaryCategoryOutput'
        type: object
      familiesCompleted:
        type: integer
      familiesUnlocked:
        type: integer
      familyTiers:
        type: integer
      level:
        type: number
      maxFamilyTiers:
        type: integer
      maxLevel:
        type: number
      totalFamilies:
        type: integer
    type: object
  models.ClassData:
    properties:
      classAverage:
        type: number
      classAverageWithProgress:
        type: number
      classes:
        additionalProperties:
          $ref: '#/definitions/models.Skill'
        type: object
      selectedClass:
        type: string
      totalClassExp:
        type: number
    type: object
  models.CollectionCategory:
    properties:
      items:
        items:
          $ref: '#/definitions/models.CollectionCategoryItem'
        type: array
      maxTiers:
        type: integer
      name:
        type: string
      texture:
        type: string
      totalTiers:
        type: integer
    type: object
  models.CollectionCategoryItem:
    properties:
      amount:
        type: integer
      amounts:
        items:
          $ref: '#/definitions/models.CollectionCategoryItemAmount'
        type: array
      id:
        type: string
      maxTier:
        type: integer
      name:
        type: string
      texture:
        type: string
      tier:
        type: integer
      totalAmount:
        type: integer
    type: object
  models.CollectionCategoryItemAmount:
    properties:
      amount:
        type: integer
      username:
        type: string
    type: object
  models.CollectionsOutput:
    properties:
      categories:
        additionalProperties:
          $ref: '#/definitions/models.CollectionCategory'
        type: object
      maxedCollections:
        type: integer
      totalCollections:
        type: integer
    type: object
  models.Commissions:
    properties:
      completions:
        type: integer
      milestone:
        type: integer
    type: object
  models.Contest:
    properties:
      amount:
        type: integer
      collected:
        type: integer
      medals:
        additionalProperties:
          type: integer
        type: object
      name:
        type: string
      texture:
        type: string
    type: object
  models.Corpse:
    properties:
      amount:
        type: integer
      name:
        type: string
      texture_path:
        type: string
    type: object
  models.Corpses:
    properties:
      corpses:
        items:
          $ref: '#/definitions/models.Corpse'
        type: array
      found:
        type: integer
      max:
        type: integer
    type: object
  models.CrimsonIsleDojo:
    properties:
      challenges:
        items:
          $ref: '#/definitions/models.CrimsonIsleDojoChallenge'
        type: array
      totalPoints:
        type: integer
    type: object
  models.CrimsonIsleDojoChallenge:
    properties:
      id:
        type: string
      name:
        type: string
      points:
        type: integer
      rank:
        type: string
      texture:
        type: string
      time:
        type: integer
    type: object
  models.CrimsonIsleFactions:
    properties:
      barbariansReputation:
        type: integer
      magesReputation:
        type: integer
      selectedFaction:
        type: string
    type: object
  models.CrimsonIsleKuudra:
    properties:
      tiers:
        items:
          $ref: '#/definitions/models.CrimsonIsleKuudraTier'
        type: array
      totalKills:
        type: integer
    type: object
  models.CrimsonIsleKuudraTier:
    properties:
      id:
        type: string
      kills:
        type: integer
      name:
        type: string
      texture:
        type: string
    type: object
  models.CrimsonIsleOutput:
    properties:
      dojo:
        $ref: '#/definitions/models.CrimsonIsleDojo'
      factions:
        $ref: '#/definitions/models.CrimsonIsleFactions'
      kuudra:
        $ref: '#/definitions/models.CrimsonIsleKuudra'
    type: object
  models.CropMilestone:
    properties:
      level:
        $ref: '#/definitions/models.Skill'
      name:
        type: string
      texture:
        type: string
    type: object
  models.CropUpgrade:
    properties:
      level:
        $ref: '#/definitions/models.Skill'
      name:
        type: string
      texture:
        type: string
    type: object
  models.CrystalHollows:
    properties:
      crystalHollowsLastAccess:
        type: integer
      nucleusRuns:
        type: integer
      progress:
        $ref: '#/definitions/models.CrystalNucleusRuns'
    type: object
  models.CrystalNucleusRuns:
    properties:
      crystals:
        additionalProperties:
          type: string
        type: object
      parts:
        additionalProperties:
          type: string
        type: object
    type: object
  models.DungeonFloorStats:
    properties:
      best_score:
        type: number
      fastest_time:
        type: number
      fastest_time_s:
        type: number
      fastest_time_s_plus:
        type: number
      milestone_completions:
        type: number
      mobs_killed:
        type: number
      most_damage:
        $ref: '#/definitions/models.MostDamageOutput'
      most_healing:
        type: number
      most_mobs_killed:
        type: number
      tier_completions:
        type: number
      times_played:
        type: number
      watcher_kills:
        type: number
    type: object
  models.DungeonStatsOutput:
    properties:
      bloodMobKills:
        type: integer
      highestFloorBeatenMaster:
        type: integer
      highestFloorBeatenNormal:
        type: integer
      secrets:
        $ref: '#/definitions/models.SecretsOutput'
    type: object
  models.DungeonsOutput:
    properties:
      catacombs:
        items:
          $ref: '#/definitions/models.FormattedDungeonFloor'
        type: array
      classes:
        $ref: '#/definitions/models.ClassData'
      level:
        $ref: '#/definitions/models.Skill'
      master_catacombs:
        items:
          $ref: '#/definitions/models.FormattedDungeonFloor'
        type: array
      stats:
        $ref: '#/definitions/models.DungeonStatsOutput'
    type: object
  models.EmbedData:
    properties:
      bank:
        type: number
      displayName:
        type: string
      dungeons:
        $ref: '#/definitions/models.EmbedDataDungeons'
      game_mode:
        type: string
      joined:
        type: integer
      networth:
        additionalProperties:
          format: float64
          type: number
        type: object
      profile_cute_name:
        type: string
      profile_id:
        type: string
      purse:
        type: number
      skills:
        $ref: '#/definitions/models.EmbedDataSkills'
      skyblock_level:
        type: number
      slayers:
        $ref: '#/definitions/models.EmbedDataSlayers'
      username:
        type: string
      uuid:
        type: string
    type: object
  models.EmbedDataDungeons:
    properties:
      classAverage:
        type: number
      classes:
        additionalProperties:
          type: integer
        type: object
      dungeoneering:
        type: number
    type: object
  models.EmbedDataSkills:
    properties:
      skillAverage:
        type: number
      skills:
        additionalProperties:
          type: integer
        type: object
    type: object
  models.EmbedDataSlayers:
    properties:
      slayers:
        additionalProperties:
          type: integer
        type: object
      xp:
        type: number
    type: object
  models.EnchantingGame:
    properties:
      attempts:
        type: integer
      bestScore:
        type: integer
      claims:
        type: integer
      name:
        type: string
      texture:
        type: string
    type: object
  models.EnchantingGameData:
    properties:
      name:
        type: string
      stats:
        $ref: '#/definitions/models.EnchantingGameStats'
    type: object
  models.EnchantingGameStats:
    properties:
      bonusClicks:
        type: integer
      games:
        items:
          $ref: '#/definitions/models.EnchantingGame'
        type: array
      lastAttempt:
        type: integer
      lastClaimed:
        type: integer
    type: object
  models.EnchantingOutput:
    properties:
      data:
        additionalProperties:
          $ref: '#/definitions/models.EnchantingGameData'
        type: object
      unlocked:
        type: boolean
    type: object
  models.EquipmentResult:
    properties:
      equipment:
        items:
          $ref: '#/definitions/models.StrippedItem'
        type: array
      stats:
        additionalProperties:
          format: float64
          type: number
        type: object
    type: object
  models.FairySouls:
    properties:
      found:
        type: integer
      total:
        type: integer
    type: object
  models.FarmingOutput:
    properties:
      contests:
        additionalProperties:
          $ref: '#/definitions/models.Contest'
        type: object
      contestsAttended:
        type: integer
      copper:
        type: integer
      medals:
        additionalProperties:
          $ref: '#/definitions/models.Medal'
        type: object
      pelts:
        type: integer
      tools:
        $ref: '#/definitions/models.SkillToolsResult'
      uniqueGolds:
        type: integer
    type: object
  models.FishingOuput:
    properties:
      itemsFished:
        type: integer
      kills:
        items:
          $ref: '#/definitions/models.Kill'
        type: array
      seaCreaturesFished:
        type: integer
      shredderBait:
        type: integer
      shredderFished:
        type: integer
      tools:
        $ref: '#/definitions/models.SkillToolsResult'
      treasure:
        type: integer
      treasureLarge:
        type: integer
      trophyFish:
        $ref: '#/definitions/models.TrophyFishOutput'
    type: object
  models.ForgeOutput:
    properties:
      duration:
        type: number
      endingTime:
        type: integer
      id:
        type: string
      name:
        type: string
      slot:
        type: integer
      startingTime:
        type: integer
    type: object
  models.FormattedDungeonFloor:
    properties:
      best_run:
        $ref: '#/definitions/models.BestRunOutput'
      name:
        type: string
      stats:
        $ref: '#/definitions/models.DungeonFloorStats'
      texture:
        type: string
    type: object
  models.Fossil:
    properties:
      found:
        type: boolean
      name:
        type: string
      texture_path:
        type: string
    type: object
  models.Fossils:
    properties:
      fossils:
        items:
          $ref: '#/definitions/models.Fossil'
        type: array
      found:
        type: integer
      max:
        type: integer
    type: object
  models.Garden:
    properties:
      composter:
        additionalProperties:
          type: integer
        type: object
      cropMilestones:
        items:
          $ref: '#/definitions/models.CropMilestone'
        type: array
      cropUpgrades:
        items:
          $ref: '#/definitions/models.CropUpgrade'
        type: array
      level:
        $ref: '#/definitions/models.Skill'
      plot:
        $ref: '#/definitions/models.PlotLayout'
      visitors:
        $ref: '#/definitions/models.Visitors'
    type: object
  models.Gear:
    properties:
      armor:
        $ref: '#/definitions/models.ArmorResult'
      equipment:
        $ref: '#/definitions/models.EquipmentResult'
      wardrobe:
        items:
          items:
            $ref: '#/definitions/models.StrippedItem'
          type: array
        type: array
      weapons:
        $ref: '#/definitions/models.WeaponsResult'
    type: object
  models.GetMagicalPowerOutput:
    properties:
      abiphone:
        type: integer
      accessories:
        type: integer
      hegemony:
        properties:
          amount:
            type: integer
          rarity:
            type: string
        type: object
      rarities:
        $ref: '#/definitions/models.GetMagicalPowerRarities'
      riftPrism:
        type: integer
      total:
        type: integer
    type: object
  models.GetMagicalPowerRarities:
    additionalProperties:
      properties:
        amount:
          type: integer
        magicalPower:
          type: integer
      type: object
    type: object
  models.GetMissingAccessoresOutput:
    properties:
      accessories:
        items:
          $ref: '#/definitions/models.StrippedItem'
        type: array
      enrichments:
        additionalProperties:
          type: integer
        type: object
      magicalPower:
        $ref: '#/definitions/models.GetMagicalPowerOutput'
      missing:
        items:
          $ref: '#/definitions/models.StrippedItem'
        type: array
      recombobulated:
        type: integer
      selectedPower:
        type: string
      stats:
        additionalProperties:
          format: float64
          type: number
        type: object
      total:
        type: integer
      totalRecombobulated:
        type: integer
      unique:
        type: integer
      upgrades:
        items:
          $ref: '#/definitions/models.StrippedItem'
        type: array
    type: object
  models.GlaciteTunnels:
    properties:
      corpses:
        $ref: '#/definitions/models.Corpses'
      fossilDust:
        type: number
      fossils:
        $ref: '#/definitions/models.Fossils'
      mineshaftsEntered:
        type: integer
    type: object
  models.HotmTokens:
    properties:
      available:
        type: integer
      spent:
        type: integer
      total:
        type: integer
    type: object
  models.Kill:
    properties:
      amount:
        type: integer
      id:
        type: string
      name:
        type: string
      texture:
        type: string
    type: object
  models.Medal:
    properties:
      amount:
        type: integer
      total:
        type: integer
    type: object
  models.MemberStats:
    properties:
      removed:
        type: boolean
      username:
        type: string
      uuid:
        type: string
    type: object
  models.MiningOutput:
    properties:
      commissions:
        $ref: '#/definitions/models.Commissions'
      crystalHollows:
        $ref: '#/definitions/models.CrystalHollows'
      forge:
        items:
          $ref: '#/definitions/models.ForgeOutput'
        type: array
      glaciteTunnels:
        $ref: '#/definitions/models.GlaciteTunnels'
      hotm:
        items:
          $ref: '#/definitions/models.ProcessedItem'
        type: array
      level:
        $ref: '#/definitions/models.Skill'
      peak_of_the_mountain:
        $ref: '#/definitions/models.PeakOfTheMountain'
      powder:
        $ref: '#/definitions/models.PowderOutput'
      selected_pickaxe_ability:
        type: string
      tokens:
        $ref: '#/definitions/models.HotmTokens'
      tools:
        $ref: '#/definitions/models.SkillToolsResult'
    type: object
  models.Minion:
    properties:
      maxTier:
        type: integer
      name:
        type: string
      texture:
        type: string
      tiers:
        items:
          type: integer
        type: array
    type: object
  models.MinionCategory:
    properties:
      maxedMinions:
        type: integer
      maxedTiers:
        type: integer
      minions:
        items:
          $ref: '#/definitions/models.Minion'
        type: array
      texture:
        type: string
      totalMinions:
        type: integer
      totalTiers:
        type: integer
    type: object
  models.MinionSlotsOutput:
    properties:
      bonusSlots:
        type: integer
      current:
        type: integer
      next:
        type: integer
    type: object
  models.MinionsOutput:
    properties:
      maxedMinions:
        type: integer
      maxedTiers:
        type: integer
      minions:
        additionalProperties:
          $ref: '#/definitions/models.MinionCategory'
        type: object
      minionsSlots:
        $ref: '#/definitions/models.MinionSlotsOutput'
      totalMinions:
        type: integer
      totalTiers:
        type: integer
    type: object
  models.MiscAuctions:
    properties:
      bids:
        type: number
      created:
        type: number
      fees:
        type: number
      gold_earned:
        type: number
      gold_spent:
        type: number
      highest_bid:
        type: number
      no_bids:
        type: number
      total_bought:
        additionalProperties:
          format: float64
          type: number
        type: object
      total_sold:
        additionalProperties:
          format: float64
          type: number
        type: object
      won:
        type: number
    type: object
  models.MiscDamage:
    properties:
      highest_critical_damage:
        type: number
    type: object
  models.MiscDragons:
    properties:
      deaths:
        additionalProperties:
          format: float64
          type: number
        type: object
      ender_crystals_destroyed:
        type: integer
      fastest_kill:
        additionalProperties:
          format: float64
          type: number
        type: object
      last_hits:
        additionalProperties:
          format: float64
          type: number
        type: object
      most_damage:
        additionalProperties:
          format: float64
          type: number
        type: object
    type: object
  models.MiscEndstoneProtector:
    properties:
      deaths:
        type: integer
      kills:
        type: integer
    type: object
  models.MiscEssence:
    properties:
      amount:
        type: integer
      name:
        type: string
      texture:
        type: string
    type: object
  models.MiscGifts:
    properties:
      given:
        type: integer
      received:
        type: integer
    type: object
  models.MiscKill:
    properties:
      amount:
        type: integer
      name:
        type: string
    type: object
  models.MiscKills:
    properties:
      deaths:
        items:
          $ref: '#/definitions/models.MiscKill'
        type: array
      kills:
        items:
          $ref: '#/definitions/models.MiscKill'
        type: array
      total_deaths:
        type: integer
      total_kills:
        type: integer
    type: object
  models.MiscMythologicalEvent:
    properties:
      burrows_chains_complete:
        additionalProperties:
          format: float64
          type: number
        type: object
      burrows_dug_combat:
        additionalProperties:
          format: float64
          type: number
        type: object
      burrows_dug_next:
        additionalProperties:
          format: float64
          type: number
        type: object
      burrows_dug_treasure:
        additionalProperties:
          format: float64
          type: number
        type: object
      kills:
        type: number
    type: object
  models.MiscOutput:
    properties:
      auctions:
        $ref: '#/definitions/models.MiscAuctions'
      claimed_items:
        additionalProperties:
          format: int64
          type: integer
        type: object
      damage:
        $ref: '#/definitions/models.MiscDamage'
      dragons:
        $ref: '#/definitions/models.MiscDragons'
      endstone_protector:
        $ref: '#/definitions/models.MiscEndstoneProtector'
      essence:
        items:
          $ref: '#/definitions/models.MiscEssence'
        type: array
      gifts:
        $ref: '#/definitions/models.MiscGifts'
      kills:
        $ref: '#/definitions/models.MiscKills'
      mythological_event:
        $ref: '#/definitions/models.MiscMythologicalEvent'
      pet_milestones:
        additionalProperties:
          $ref: '#/definitions/models.MiscPetMilestone'
        type: object
      profile_upgrades:
        $ref: '#/definitions/models.MiscProfileUpgrades'
      season_of_jerry:
        $ref: '#/definitions/models.MiscSeasonOfJerry'
      uncategorized:
        additionalProperties: {}
        type: object
    type: object
  models.MiscPetMilestone:
    properties:
      amount:
        type: integer
      progress:
        type: string
      rarity:
        type: string
      total:
        type: integer
    type: object
  models.MiscProfileUpgrades:
    additionalProperties:
      type: integer
    type: object
  models.MiscSeasonOfJerry:
    properties:
      most_cannonballs_hit:
        type: integer
      most_damage_dealt:
        type: integer
      most_magma_damage_dealt:
        type: integer
      most_snowballs_hit:
        type: integer
    type: object
  models.MostDamageOutput:
    properties:
      damage:
        type: number
      type:
        type: string
    type: object
  models.OutputPets:
    properties:
      amount:
        type: integer
      amountSkins:
        type: integer
      missing:
        items:
          $ref: '#/definitions/models.StrippedPet'
        type: array
      petScore:
        $ref: '#/definitions/models.PetScore'
      pets:
        items:
          $ref: '#/definitions/models.StrippedPet'
        type: array
      total:
        type: integer
      totalCandyUsed:
        type: integer
      totalPetExp:
        type: integer
    type: object
  models.PeakOfTheMountain:
    properties:
      level:
        type: integer
      max_level:
        type: integer
    type: object
  models.PetScore:
    properties:
      amount:
        type: integer
      reward:
        items:
          $ref: '#/definitions/models.PetScoreReward'
        type: array
      stats:
        additionalProperties:
          format: float64
          type: number
        type: object
    type: object
  models.PetScoreReward:
    properties:
      bonus:
        type: integer
      score:
        type: integer
      unlocked:
        type: boolean
    type: object
  models.PlayerResolve:
    properties:
      username:
        type: string
      uuid:
        type: string
    type: object
  models.PlotLayout:
    properties:
      barnSkin:
        type: string
      layout:
        items:
          $ref: '#/definitions/models.ProcessedItem'
        type: array
      total:
        type: integer
      unlocked:
        type: integer
    type: object
  models.PowderAmount:
    properties:
      available:
        type: integer
      spent:
        type: integer
      total:
        type: integer
    type: object
  models.PowderOutput:
    properties:
      gemstone:
        $ref: '#/definitions/models.PowderAmount'
      glacite:
        $ref: '#/definitions/models.PowderAmount'
      mithril:
        $ref: '#/definitions/models.PowderAmount'
    type: object
  models.ProcessedItem:
    properties:
      Count:
        type: integer
      Damage:
        type: integer
      categories:
        items:
          type: string
        type: array
      containsItems:
        items:
          $ref: '#/definitions/models.ProcessedItem'
        type: array
      display_name:
        type: string
      id:
        type: string
      isInactive:
        type: boolean
      lore:
        items:
          type: string
        type: array
      rarity:
        type: string
      recombobulated:
        type: boolean
      shiny:
        type: boolean
      source:
        type: string
      tag:
        $ref: '#/definitions/skycrypttypes.Tag'
      texture_pack:
        type: string
      texture_path:
        type: string
      wiki:
        $ref: '#/definitions/models.WikipediaLinks'
    type: object
  models.ProcessingError:
    properties:
      error:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  models.ProfilesStats:
    properties:
      cute_name:
        type: string
      game_mode:
        type: string
      profile_id:
        type: string
      selected:
        type: boolean
    type: object
  models.RankOutput:
    properties:
      plusColor:
        type: string
      plusText:
        type: string
      rankColor:
        type: string
      rankText:
        type: string
    type: object
  models.RiftCastleOutput:
    properties:
      grubberStacks:
        type: integer
      maxBurgers:
        type: integer
    type: object
  models.RiftEnigmaOutput:
    properties:
      souls:
        type: integer
      totalSouls:
        type: integer
    type: object
  models.RiftMotesOutput:
    properties:
      lifetime:
        type: integer
      orbs:
        type: integer
      purse:
        type: integer
    type: object
  models.RiftOutput:
    properties:
      armor:
        $ref: '#/definitions/models.ArmorResult'
      castle:
        $ref: '#/definitions/models.RiftCastleOutput'
      enigma:
        $ref: '#/definitions/models.RiftEnigmaOutput'
      equipment:
        $ref: '#/definitions/models.EquipmentResult'
      motes:
        $ref: '#/definitions/models.RiftMotesOutput'
      porhtal:
        $ref: '#/definitions/models.RiftPortalsOutput'
      timecharms:
        $ref: '#/definitions/models.RiftTimecharmsOutput'
      visits:
        type: integer
    type: object
  models.RiftPorhtal:
    properties:
      name:
        type: string
      texture:
        type: string
      unlocked:
        type: boolean
    type: object
  models.RiftPortalsOutput:
    properties:
      porhtals:
        items:
          $ref: '#/definitions/models.RiftPorhtal'
        type: array
      porhtalsFound:
        type: integer
    type: object
  models.RiftTimecharms:
    properties:
      name:
        type: string
      texture:
        type: string
      unlocked:
        type: boolean
      unlockedAt:
        type: integer
    type: object
  models.RiftTimecharmsOutput:
    properties:
      timecharms:
        items:
          $ref: '#/definitions/models.RiftTimecharms'
        type: array
      timecharmsFound:
        type: integer
    type: object
  models.SecretsOutput:
    properties:
      found:
        type: integer
      secretsPerRun:
        type: number
    type: object
  models.Skill:
    properties:
      level:
        type: integer
      levelCap:
        type: integer
      levelWithProgress:
        type: number
      maxLevel:
        type: integer
      maxed:
        type: boolean
      progress:
        type: number
      texture:
        type: string
      uncappedLevel:
        type: integer
      unlockableLevelWithProgress:
        type: number
      xp:
        type: integer
      xpCurrent:
        type: integer
      xpForNext:
        type: integer
    type: object
  models.SkillToolsResult:
    properties:
      highest_priority_tool:
        $ref: '#/definitions/models.StrippedItem'
      tools:
        items:
          $ref: '#/definitions/models.StrippedItem'
        type: array
    type: object
  models.Skills:
    properties:
      averageSkillLevel:
        type: number
      averageSkillLevelWithProgress:
        type: number
      skills:
        additionalProperties:
          $ref: '#/definitions/models.Skill'
        type: object
      totalSkillXp:
        type: integer
    type: object
  models.SkillsOutput:
    properties:
      enchanting:
        $ref: '#/definitions/models.EnchantingOutput'
      farming:
        $ref: '#/definitions/models.FarmingOutput'
      fishing:
        $ref: '#/definitions/models.FishingOuput'
      mining:
        $ref: '#/definitions/models.MiningOutput'
    type: object
  models.SlayerData:
    properties:
      kills:
        additionalProperties:
          type: integer
        type: object
      level:
        $ref: '#/definitions/models.SlayerLevel'
      name:
        type: string
      texture:
        type: string
    type: object
  models.SlayerLevel:
    properties:
      level:
        type: integer
      maxLevel:
        type: integer
      maxed:
        type: boolean
      xp:
        type: integer
      xpForNext:
        type: integer
    type: object
  models.SlayersOutput:
    properties:
      data:
        additionalProperties:
          $ref: '#/definitions/models.SlayerData'
        type: object
      stats:
        additionalProperties:
          format: float64
          type: number
        type: object
      totalSlayerExp:
        type: integer
    type: object
  models.StatsInfo:
    additionalProperties:
      type: integer
    type: object
  models.StatsOutput:
    properties:
      apiSettings:
        additionalProperties:
          type: boolean
        type: object
      bank:
        type: number
      displayName:
        type: string
      fairySouls:
        $ref: '#/definitions/models.FairySouls'
      joined:
        type: integer
      members:
        items:
          $ref: '#/definitions/models.MemberStats'
        type: array
      personalBank:
        type: number
      profile_cute_name:
        type: string
      profile_id:
        type: string
      profiles:
        items:
          $ref: '#/definitions/models.ProfilesStats'
        type: array
      purse:
        type: number
      rank:
        $ref: '#/definitions/models.RankOutput'
      selected:
        type: boolean
      skills:
        $ref: '#/definitions/models.Skills'
      skyblock_level:
        $ref: '#/definitions/models.Skill'
      social:
        $ref: '#/definitions/skycrypttypes.SocialMediaLinks'
      username:
        type: string
      uuid:
        type: string
    type: object
  models.StrippedItem:
    properties:
      Count:
        type: integer
      containsItems:
        items:
          $ref: '#/definitions/models.StrippedItem'
        type: array
      display_name:
        type: string
      isInactive:
        type: boolean
      lore:
        items:
          type: string
        type: array
      rarity:
        type: string
      recombobulated:
        type: boolean
      shiny:
        type: boolean
      source:
        type: string
      texture_pack:
        type: string
      texture_path:
        type: string
      wiki:
        $ref: '#/definitions/models.WikipediaLinks'
    type: object
  models.StrippedPet:
    properties:
      active:
        type: boolean
      display_name:
        type: string
      level:
        type: integer
      lore:
        items:
          type: string
        type: array
      rarity:
        type: string
      stats:
        additionalProperties:
          format: float64
          type: number
        type: object
      texture_path:
        type: string
      type:
        type: string
    type: object
  models.TrophyFish:
    properties:
      bronze:
        type: integer
      description:
        type: string
      diamond:
        type: integer
      gold:
        type: integer
      id:
        type: string
      maxed:
        type: boolean
      name:
        type: string
      silver:
        type: integer
      texture:
        type: string
    type: object
  models.TrophyFishOutput:
    properties:
      stage:
        $ref: '#/definitions/models.TrophyFishStage'
      totalCaught:
        type: integer
      trophyFish:
        items:
          $ref: '#/definitions/models.TrophyFish'
        type: array
    type: object
  models.TrophyFishProgress:
    properties:
      caught:
        type: integer
      tier:
        type: string
      total:
        type: integer
    type: object
  models.TrophyFishStage:
    properties:
      name:
        type: string
      progress:
        items:
          $ref: '#/definitions/models.TrophyFishProgress'
        type: array
    type: object
  models.VisitorRarityData:
    properties:
      completed:
        type: integer
      maxUnique:
        type: integer
      unique:
        type: integer
      visited:
        type: integer
    type: object
  models.Visitors:
    properties:
      completed:
        type: integer
      uniqueVisitors:
        type: integer
      visited:
        type: integer
      visitors:
        additionalProperties:
          $ref: '#/definitions/models.VisitorRarityData'
        type: object
    type: object
  models.WeaponsResult:
    properties:
      highest_priority_weapon:
        $ref: '#/definitions/models.StrippedItem'
      weapons:
        items:
          $ref: '#/definitions/models.StrippedItem'
        type: array
    type: object
  models.WikipediaLinks:
    properties:
      fandom:
        type: string
      official:
        type: string
    type: object
  skycrypttypes.Display:
    properties:
      Lore:
        items:
          type: string
        type: array
      Name:
        type: string
      color:
        type: integer
    type: object
  skycrypttypes.ExtraAttributes:
    properties:
      ability_scroll:
        items:
          type: string
        type: array
      additional_coins:
        type: integer
      art_of_war_count:
        type: integer
      artOfPeaceApplied:
        type: integer
      attributes:
        additionalProperties:
          type: integer
        type: object
      auction:
        type: integer
      bid:
        type: integer
      boosters:
        items:
          type: string
        type: array
      champion_combat_xp:
        type: number
      compact_blocks:
        type: integer
      divan_powder_coating:
        type: integer
      donated_museum:
        type: boolean
      drill_part_engine:
        type: string
      drill_part_fuel_tank:
        type: string
      drill_part_upgrade_module:
        type: string
      dungeon_item_level: {}
      dye_item:
        type: string
      edition:
        type: integer
      enchantments:
        additionalProperties:
          type: integer
        type: object
      ethermerge:
        type: integer
      expertise_kills:
        type: integer
      farmed_cultivating:
        type: integer
      farming_for_dummies_count:
        type: integer
      gems:
        additionalProperties: {}
        type: object
      hecatomb_s_runs:
        type: integer
      hook:
        $ref: '#/definitions/skycrypttypes.RodPart'
      hot_potato_count:
        type: integer
      id:
        type: string
      is_shiny:
        type: boolean
      item_tier:
        type: integer
      jalapeno_count:
        type: integer
      line:
        $ref: '#/definitions/skycrypttypes.RodPart'
      mana_disintegrator_count:
        type: integer
      model:
        type: string
      modifier:
        type: string
      new_year_cake_bag_data:
        items:
          type: integer
        type: array
      new_year_cake_bag_years:
        items:
          type: integer
        type: array
      new_years_cake:
        type: integer
      party_hat_color:
        type: string
      party_hat_emoji:
        type: string
      petInfo:
        type: string
      pickonimbus_durability:
        type: integer
      polarvoid:
        type: integer
      power_ability_scroll:
        type: string
      price:
        type: integer
      rarity_upgrades:
        type: integer
      runes:
        additionalProperties:
          type: integer
        type: object
      sack_pss:
        type: integer
      sinker:
        $ref: '#/definitions/skycrypttypes.RodPart'
      skin:
        type: string
      talisman_enrichment:
        type: string
      thunder_charge:
        type: integer
      timestamp: {}
      tuned_transmission:
        type: integer
      upgrade_level: {}
      uuid:
        type: string
      winning_bid:
        type: integer
      wood_singularity_count:
        type: integer
    type: object
  skycrypttypes.Item:
    properties:
      Count:
        type: integer
      Damage:
        type: integer
      containsItems:
        items:
          $ref: '#/definitions/skycrypttypes.Item'
        type: array
      id:
        type: integer
      tag:
        $ref: '#/definitions/skycrypttypes.Tag'
    type: object
  skycrypttypes.Properties:
    properties:
      textures:
        items:
          $ref: '#/definitions/skycrypttypes.Texture'
        type: array
    type: object
  skycrypttypes.RodPart:
    properties:
      donated_museum:
        type: boolean
      part:
        type: string
    type: object
  skycrypttypes.SkullOwner:
    properties:
      Id:
        type: string
      Properties:
        $ref: '#/definitions/skycrypttypes.Properties'
    type: object
  skycrypttypes.SocialMediaLinks:
    properties:
      DISCORD:
        type: string
      HYPIXEL:
        type: string
      TWITCH:
        type: string
      TWITTER:
        type: string
    type: object
  skycrypttypes.Tag:
    properties:
      ExtraAttributes:
        allOf:
        - $ref: '#/definitions/skycrypttypes.ExtraAttributes'
        description: |-
          HideFlags       int             `nbt:"HideFlags" json:"HideFlags,omitempty"`
          Unbreakable     int             `nbt:"Unbreakable" json:"Unbreakable,omitempty"`
          Enchantments    []Enchantment   `nbt:"ench" json:"ench,omitempty"`
      SkullOwner:
        $ref: '#/definitions/skycrypttypes.SkullOwner'
      display:
        $ref: '#/definitions/skycrypttypes.Display'
    type: object
  skycrypttypes.Texture:
    properties:
      Signature:
        type: string
      Value:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/accessories/{uuid}/{profileId}:
    get:
      consumes:
      - application/json
      description: Returns accessories for the given user and profile ID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Profile ID
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetMissingAccessoresOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get accessories stats of a specified player
      tags:
      - accessories
  /api/bestiary/{uuid}/{profileId}:
    get:
      consumes:
      - application/json
      description: Returns bestiary for the given user and profile ID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Profile ID
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BestiaryOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get bestiary stats of a specified player
      tags:
      - bestiary
  /api/collections/{uuid}/{profileId}:
    get:
      consumes:
      - application/json
      description: Returns collections for the given user and profile ID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Profile ID
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CollectionsOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get collections stats of a specified player
      tags:
      - collections
  /api/crimson_isle/{uuid}/{profileId}:
    get:
      consumes:
      - application/json
      description: Returns Crimson Isle stats for the given user and profile ID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Profile ID
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CrimsonIsleOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get Crimson Isle stats of a specified player
      tags:
      - crimson_isle
  /api/dungeons/{uuid}/{profileId}:
    get:
      consumes:
      - application/json
      description: Returns dungeons for the given user and profile ID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Profile ID
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DungeonsOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get dungeons stats of a specified player
      tags:
      - dungeons
  /api/embed/{uuid}/{profileId}:
    get:
      consumes:
      - application/json
      description: Returns embed data for the given user (UUID or username) and optional
        profile ID
      parameters:
      - description: User UUID or username
        in: path
        name: uuid
        required: true
        type: string
      - description: Profile ID (optional)
        in: path
        name: profileId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EmbedData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get embed data for a specified player
      tags:
      - embed
  /api/garden/{profileId}:
    get:
      consumes:
      - application/json
      description: Returns garden data for the given profile ID
      parameters:
      - description: Profile ID
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Garden'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get garden stats of a specified profile
      tags:
      - garden
  /api/gear/{uuid}/{profileId}:
    get:
      consumes:
      - application/json
      description: Returns gear for the given user and profile ID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Profile ID
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Gear'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get gear stats of a specified player
      tags:
      - gear
  /api/head/{textureId}:
    get:
      description: Returns a PNG image of a head for the given texture ID
      parameters:
      - description: Texture ID
        in: path
        name: textureId
        required: true
        type: string
      produces:
      - image/png
      responses:
        "200":
          description: PNG image of the head
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
        "500":
          description: Failed to render head
          schema:
            type: string
      summary: Render and return a head image
      tags:
      - head
  /api/inventory/{uuid}/{profileId}/{inventoryId}:
    get:
      consumes:
      - application/json
      description: Returns inventory items for the given user, profile ID, and inventory
        ID. Supports museum, search, and other inventories.
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Profile ID
        in: path
        name: profileId
        required: true
        type: string
      - description: Inventory ID (e.g., museum, search, or other inventory types)
        in: path
        name: inventoryId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.StrippedItem'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get inventory items for a specified player
      tags:
      - inventory
  /api/inventory/{uuid}/{profileId}/search/{search}:
    get:
      consumes:
      - application/json
      description: Returns inventory items for the given user, profile ID, and inventory
        ID. Supports museum, search, and other inventories.
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Profile ID
        in: path
        name: profileId
        required: true
        type: string
      - description: Search string (required when inventoryId is 'search')
        in: path
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.StrippedItem'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get inventory items for a specified player
      tags:
      - inventory
  /api/item/{itemId}:
    get:
      description: Returns a PNG image of an item for the given texture ID
      parameters:
      - description: Item ID
        in: path
        name: itemId
        required: true
        type: string
      produces:
      - image/png
      responses:
        "200":
          description: PNG image of the item
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
        "500":
          description: Failed to render item
          schema:
            type: string
      summary: Render and return an item image
      tags:
      - item
  /api/leather/{type}/{color}:
    get:
      description: Returns a PNG image of leather armor for the given type and color
      parameters:
      - description: Armor Type
        in: path
        name: type
        required: true
        type: string
      - description: Armor Color
        in: path
        name: color
        required: true
        type: string
      produces:
      - image/png
      responses:
        "200":
          description: PNG image of the leather armor
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Render and return a leather armor image
      tags:
      - leather
  /api/minions/{uuid}/{profileId}:
    get:
      consumes:
      - application/json
      description: Returns minions for the given user and profile ID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Profile ID
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MinionsOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get minions stats of a specified player
      tags:
      - minions
  /api/misc/{uuid}/{profileId}:
    get:
      consumes:
      - application/json
      description: Returns misc stats for the given user and profile ID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Profile ID
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MiscOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get misc stats of a specified player
      tags:
      - misc
  /api/networth/{uuid}/{profileId}:
    get:
      consumes:
      - application/json
      description: Returns networth for the given user and profile ID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Profile ID
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get networth of a specified player
      tags:
      - networth
  /api/pets/{uuid}/{profileId}:
    get:
      consumes:
      - application/json
      description: Returns pets for the given user and profile ID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Profile ID
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OutputPets'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get pets stats of a specified player
      tags:
      - pets
  /api/playerStats/{uuid}/{profileId}:
    get:
      consumes:
      - application/json
      description: Returns player stats for the given user and profile ID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Profile ID
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              $ref: '#/definitions/models.StatsInfo'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get player stats of a specified player
      tags:
      - playerStats
  /api/potion/{type}/{color}:
    get:
      description: Returns a PNG image of a potion for the given type and color
      parameters:
      - description: Potion Type
        in: path
        name: type
        required: true
        type: string
      - description: Potion Color
        in: path
        name: color
        required: true
        type: string
      produces:
      - image/png
      responses:
        "200":
          description: PNG image of the potion
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Render and return a potion image
      tags:
      - potion
  /api/rift/{uuid}/{profileId}:
    get:
      consumes:
      - application/json
      description: Returns rift data for the given user and profile ID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Profile ID
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RiftOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get rift stats of a specified player
      tags:
      - rift
  /api/skills/{uuid}/{profileId}:
    get:
      consumes:
      - application/json
      description: Returns skills for the given user and profile ID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Profile ID
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SkillsOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get skills stats of a specified player
      tags:
      - skills
  /api/slayer/{uuid}/{profileId}:
    get:
      consumes:
      - application/json
      description: Returns slayer statistics for the given user and profile ID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Profile ID
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SlayersOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get slayer stats of a specified player
      tags:
      - slayers
  /api/stats/{uuid}/{profileId}:
    get:
      consumes:
      - application/json
      description: Returns stats for the given user and profile ID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Profile ID
        in: path
        name: profileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatsOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get stats of a specified player
      tags:
      - stats
  /api/username/{uuid}:
    get:
      consumes:
      - application/json
      description: Returns the username associated with the given UUID
      parameters:
      - description: UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PlayerResolve'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get username for a specified UUID
      tags:
      - username
  /api/uuid/{username}:
    get:
      consumes:
      - application/json
      description: Returns the UUID associated with the given username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PlayerResolve'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ProcessingError'
      summary: Get UUID for a specified username
      tags:
      - uuid
swagger: "2.0"
